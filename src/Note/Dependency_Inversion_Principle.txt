=> SOLID
https://kipalog.com/posts/Tim-hieu-nhanh-SOLID-than-thanh

S: Single Dependency Principle 
	- a class should have only a single reponsibility.
	- mỗi class chỉ đảm nhiệm 1 và chỉ một trách nhiệm duy nhất 
	=> dễ quản lý code.
O: Open/Close principle 
	- muốn mở rộng thì chỉ nên kế thừa các chứ không nên sửa đổi chúng.
L: Liskov substitution principle 
	- các đối tượng của class cha có thể được thay thế bới các đối tượng của lớp con mà k làm chương trình thay đổi.
I: Interface segregation principle 
	- nhiều interface cụ thể tốt hơn 1 interface chung. k nên bắt kế thừa 1 interface chứa các method k dùng đến.
D: Dependency inversion principle 
	- ex: projectDeveloper sử dụng frontEndDeveloper và backEndDeveloper nên cùng kế thừa IDeveloper 
	- Để các module cấp thấp có thay đổi cũng không ảnh hưởng tới projectDeveloper.

=> Concepts:  
- Dependency Inversion - (Principle) : Nguyên lý để thiết kế và viết code
- Inversion of Control (IoC) - (Pattern): 
	Đây là một design pattern được tạo ra để developer có thể tuân thủ nguyên lý Dependency Inversion.
	Có nhiều cách hiện thực pattern này: ServiceLocator, Event, Delegate, … 
	và Dependency Injection là một trong các cách đó.
- Dependency Injection (DI): 
	Đây là một cách để hiện thực IoC Pattern (Có thể coi là một design pattern riêng). 
	Các module phụ thuộc (dependency) được inject vào module cấp cao. Ex 

=> Architecture:
          Dependency Inversion (Principle)
          Inversion of Control (Pattern)
Service | Event | Delegate | Dependency Injection

=> Dependency Injection: 

1. Các module không giao tiếp trực tiếp với nhau, mà thông qua interface. 
Module cấp thấp sẽ implement interface, module cấp cao sẽ gọi module cấp thấp thông qua interface.
Ví dụ: Để giao tiếp với database, ta có interface IDatabase, các module cấp thấp là XMLDatabase, SQLDatabase. 
Module cấp cao là CustomerBusiness sẽ chỉ sử dụng interface IDatabase.

2. Việc khởi tạo các module cấp thấp sẽ do DI Container thực hiện. 
Ví dụ: Trong module CustomerBusiness, ta sẽ không khởi tạo IDatabase db = new XMLDatabase(), 
việc này sẽ do DI Container thực hiện. Module CustomerBusiness sẽ không biết gì về module XMLDatabase hay SQLDatabase.

3. Việc Module nào gắn với interface nào sẽ được config trong code hoặc trong file XML.

4. DI được dùng để làm giảm sự phụ thuộc giữa các module, dễ dàng hơn trong việc thay đổi module, bảo trì code và testing.


=> Các dạng DI
- Có 3 dạng Dependency Injection (DI):
1. Constructor Injection: 
	- Các DI được tiêm (inject) vào class thông qua constructor. Đây là cách thông dụng nhất.
2. Setter Injection: 
	- Các dependency sẽ được truyền vào class thông qua các hàm Setter.
3. Interface Injection: 
	- Class cần ịnect sẽ implement 1 interface. Interface chứa 1 hàm tên Inject. 
	  Container sẽ injection dependency vào 1 class thông qua việc gọi hàm Inject của interface đó. 
	=> Đây là cách rườm rà và ít được sử dụng nhất.

DI:
- Ưu: 
 + Giảm sự kết dính giữa các module.
 + Code dễ bảo trì, dễ thay thế module.
 + Rất dễ test và viết Unit test.
 + Dễ dàng thấy quan hệ giữa các module (vì các phụ thuộc được inject vào constructor).

- Khuyết: 
 + Sử dụng interface đôi khi khó debug.
 + Các objects đước khởi tạo toàn bộ ngay từ đầu, có thể giảm performance.
 + Làm tăng độ phức tạp của code.













